name: Android CI (Shelter Fork - ARM32 Target)

on:
  push:
    branches:
      - main # Adjust this to your default branch if it's not 'main' (e.g., master, develop)
  pull_request:
    branches:
      - main # Adjust this to your default branch

jobs:
  build:
    runs-on: ubuntu-latest # GitHub-hosted runners are x86_64, but they can build APKs for ARM32

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended distribution
          java-version: '17' # Common Java version for modern Android projects. Adjust if your project requires a different one.

      - name: Define Android SDK Environment Variables
        # Explicitly set ANDROID_SDK_ROOT and add SDK tools to PATH.
        # This ensures sdkmanager and other tools are found correctly.
        run: |
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_ENV

      - name: Accept Android SDK Licenses
        # This is the most critical step to fix your current error.
        # We pipe 'yes' to all prompts from sdkmanager --licenses, using the full path to sdkmanager.
        run: yes | ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install required Android SDK components
        # Install specific SDK platform and build tools needed by your project.
        # Android 11 is API 30. Building with API 34 tools is fine if minSdk/targetSdk are compatible.
        run: |
          ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "build-tools;34.0.0" \
          "platforms;android-34"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (Debug APK)
        # This command will build the debug version of your APK.
        # For ARM32 (A10s), your app's build.gradle should have 'armeabi-v7a' in abiFilters
        # if it uses native libraries. This YAML sets up the environment to allow such a build.
        run: ./gradlew assembleDebug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks # You can name the artifact anything, e.g., 'shelter-debug-apks'
          path: app/build/outputs/apk/debug/*.apk # This path assumes your main module is 'app'. Adjust if different.
                                                  # The *.apk wildcard ensures all generated APKs (including for ARM32) are uploaded.
